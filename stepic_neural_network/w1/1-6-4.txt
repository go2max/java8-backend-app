Как создать массив:

    array(object) — n-мерный массив из любой (возможно, вложенной) последовательности,
    eye(N, M=N, k=0) -- двумерный массив с N строками с единицами на диагонали и нулями во всех остальных позициях. Число столбцов M по умолчанию равно N, k — сдвиг диагонали (0 для основной диагонали, положительные числа для верхних диагоналей и отрицательные для нижних),
    zeros(shape) -- новый массив указанной формы, заполненный нулями,
    ones(shape) -- новый массив указанной формы, заполненный единицами,
    full(shape, fill_value) -- новый массив указанной формы, заполненный fill_value.

>>> print(np.eye(5, 3, k=-1))
[[ 0.  0.  0.]
 [ 1.  0.  0.]
 [ 0.  1.  0.]
 [ 0.  0.  1.]
 [ 0.  0.  0.]]
>>> print(np.array([[1,2,3], [4,5,6]])) # матрица формы (2, 3) из последовательности последовательностей
[[1 2 3]
 [4 5 6]]



Как получить доступ к элементу массива или выбрать кусок массива:

    в NumPy используется стандартное  выделение подмножеств: a[start:stop:step] выбирает элементы из a с индексами от start до stop с шагом step, т.е. a[start], a[start + step], a[start + 2*step] и так далее, пока индексы меньше stop; при step = 1 этот параметр можно опустить, оставив start:stop, при start, равном минимальному индексу в массиве, или stop, равному максимальному индексу, эти индексы также можно опустить: это будет выглядеть как a[:];
    отрицательные индексы;
    поддерживается синтаксис многоточия: a[..., 1] выбирает элементы с любым индексом в первом измерении и с индексом, равным 1, во втором измерении:  a[:, 1] оказывается эквивалентно a[..., 1];
    можно указать индексы сразу в нескольких измерениях, указав их через запятую в квадратных скобках (как a[..., 1] в примере выше).